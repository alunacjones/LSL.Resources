{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lslresources","title":"LSL.Resources","text":"<p>A library to ease the pain of reading resources from an assembly. All helper methods use <code>string.EndsWith</code> to ease the pain of searching for resources.</p> <p>NOTE: When searching for a resource they are ordered in full name order and the first matching resource is selected.</p> <p>The main helper methods cover:</p> <ul> <li>Obtaining a <code>Stream</code> for a matched resource.</li> <li>Reading string content for a matched resource.</li> <li>Reading a matched resource as <code>JSON</code>.<ul> <li>These methods use the full type name to match a resource name (with the extension <code>.json</code>)</li> <li>System.Text.Json is used for deserialization</li> </ul> </li> </ul>"},{"location":"01-get-a-stream/","title":"Getting a stream","text":"<p>If you wish to just use the stream of the resource you are interested in (rather than the extra helper methods) then this method will be for you.</p> <p>Note</p> <p>This can be useful for reading binary data or interfacing with libraries that prefer to use streams.</p> <p>This example could have just used the ReadStringResource method instead.</p> <pre><code>using var stream = typeof(JsonTestClass)\n    .Assembly\n    .GetResourceStream(\"text-file.txt\");\n\nusing var reader = new StreamReader(stream);\n\nvar content = reader.ReadToEnd();\n\n// content will be \"Text file\"\n</code></pre>"},{"location":"02-read-text/","title":"Reading a string resource","text":"<p>The following example shows us reading the text content of a resource whose name ends with <code>text-file.txt</code>:</p> <pre><code>var content = typeof(JsonTestClass)\n    .Assembly\n    .ReadStringResource(\"text-file.txt\");\n\n// content will be \"Text file\"\n</code></pre>"},{"location":"Reading%20JSON/01-quick-start/","title":"Quick start","text":"<p>With no configuration the following will deserialize the <code>JSON</code> content of the resource into an instance of <code>JsonTestClass</code></p> <p>Note</p> <p>The resource used in this example can be found here</p> <pre><code>var theObject = ResourceHelper\n    .ReadJsonResource&lt;JsonTestClass&gt;();\n\n// theObject will have a Name of \"Als\" and Age of 12\n</code></pre>"},{"location":"Reading%20JSON/02-custom-json-options/","title":"Custom JSON options","text":"<p>Sometimes we may have a class that needs custom serialization settings e.g. the use of a <code>JsonStringEnumConverter</code>. The following example needs to use that to get a string value for an enum value to be deserialized.</p> <p>Note</p> <p>The resource used in this example can be found here</p> <pre><code>var theObject = ResourceHelper\n    .ReadJsonResource&lt;JsonTestClassWithEnum&gt;(c =&gt; c\n        .ConfigureJsonDeserializerOptions(\n            c =&gt; c.Converters.Add(new JsonStringEnumConverter())\n        )\n    );\n\n// theObject will have a Name of \"OtherAls\", Answer of \"No\" and Age of 10\n</code></pre>"},{"location":"Reading%20JSON/03-custom-resource-name/","title":"Custom resource name","text":"<p>The default behaviour of choosing a resource name based on the full type may not be desirable in all circumstances. The following example shows us fetching a JSON resource whose name ends with <code>other.json</code> instead.</p> <p>Note</p> <p>The resource used in this example can be found here</p> <pre><code>var theObject = ResourceHelper\n    .ReadJsonResource&lt;JsonTestClass&gt;(c =&gt; c\n        .MatchingResourceEndsWith(\"other.json\")\n    );\n\n// theObject will have a Name of \"Als2\" and Age of 13\n</code></pre>"}]}